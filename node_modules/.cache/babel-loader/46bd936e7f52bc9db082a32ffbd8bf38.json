{"remainingRequest":"D:\\转化仓库\\e-adminSystem\\node_modules\\babel-loader\\lib\\index.js!D:\\转化仓库\\e-adminSystem\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\转化仓库\\e-adminSystem\\src\\constant\\goods\\index.js","dependencies":[{"path":"D:\\转化仓库\\e-adminSystem\\src\\constant\\goods\\index.js","mtime":1679368696526},{"path":"D:\\转化仓库\\e-adminSystem\\babel.config.js","mtime":1679368691947},{"path":"D:\\转化仓库\\e-adminSystem\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1678778409044},{"path":"D:\\转化仓库\\e-adminSystem\\node_modules\\babel-loader\\lib\\index.js","mtime":1678778390429},{"path":"D:\\转化仓库\\e-adminSystem\\node_modules\\eslint-loader\\index.js","mtime":1678778406019}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"D:/\\u8F6C\\u5316\\u4ED3\\u5E93/e-adminSystem/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/web.dom.iterable\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n/** module/index.js\r\n * 常量枚举池\r\n * 可以根据文件对枚举所属的模块进行拆分\r\n * 此文件主要是收集模块常量然后统一暴露出去\r\n */\nvar EnumModule = {};\nvar req = function req(context) {\n  return context.keys().map(context);\n};\nvar options = req(require.context('./', true, /\\.js$/)); // 批量导入当前文件所在目录下的.js文件\n\noptions.forEach(function (option) {\n  Object.assign(EnumModule, _objectSpread({}, option));\n});\nexport default EnumModule;",{"version":3,"names":["EnumModule","req","context","keys","map","options","require","forEach","option","Object","assign","_objectSpread"],"sources":["D:/转化仓库/e-adminSystem/src/constant/goods/index.js"],"sourcesContent":["/** module/index.js\r\n * 常量枚举池\r\n * 可以根据文件对枚举所属的模块进行拆分\r\n * 此文件主要是收集模块常量然后统一暴露出去\r\n */\r\nconst EnumModule = {}\r\n\r\nconst req = context => context.keys().map(context)\r\nconst options = req(require.context('./', true, /\\.js$/)) // 批量导入当前文件所在目录下的.js文件\r\n\r\noptions.forEach(option => {\r\n  Object.assign(EnumModule, {\r\n    ...option\r\n  })\r\n})\r\n\r\nexport default EnumModule\r\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA,IAAMA,UAAU,GAAG,CAAC,CAAC;AAErB,IAAMC,GAAG,GAAG,SAANA,GAAGA,CAAGC,OAAO;EAAA,OAAIA,OAAO,CAACC,IAAI,EAAE,CAACC,GAAG,CAACF,OAAO,CAAC;AAAA;AAClD,IAAMG,OAAO,GAAGJ,GAAG,CAACK,OAAO,CAACJ,OAAO,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC,EAAC;;AAE1DG,OAAO,CAACE,OAAO,CAAC,UAAAC,MAAM,EAAI;EACxBC,MAAM,CAACC,MAAM,CAACV,UAAU,EAAAW,aAAA,KACnBH,MAAM,EACT;AACJ,CAAC,CAAC;AAEF,eAAeR,UAAU"}]}